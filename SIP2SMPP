#!/usr/bin/env python
from libs import smpplib
import sys,os,socket,time, uuid, hashlib,re,logging
from thread import *

#import pdb #debug mode : pdb.set_trace() 

sys.excepthook = lambda *args: None

# SIP Local Port to bind
LOCAL_SIP_IP = '127.0.0.1'
LOCAL_SIP_PORT = 5066

# IPBX
DEST_SIP_IP = '127.0.0.1'
DEST_SIP_PORT = 6000

# SMPP 
SMPP_IP = '127.0.0.1'
SMPP_PORT = '2775'
SMPP_LOGIN = 'login'
SMPP_PASSWORD = 'password'


#############################################################################################
#############################################################################################
#############################################################################################
#############################################################################################

#SOCK init
SOCK_SIP  = None 
SOCK_SMPP = None

##########
# LOG
#####
# DEBUG | INFO | WARNING | ERROR | CRITICAL
#####
logging.basicConfig(level=logging.INFO) 
log = logging.getLogger('SMSC')
##########

sys.path.insert(0, '..')
#####
# Connect / DISCONNECT FROM SMPP
#####
def smppConnect():
	global SOCK_SMPP
	SOCK_SMPP = smpplib.client.Client(SMPP_IP, SMPP_PORT)
	SOCK_SMPP.connect()
	log.info('Activating SMPP on '+str(SMPP_IP)+':'+str(SMPP_PORT))
	SOCK_SMPP.bind_transceiver(system_id=SMPP_LOGIN, password=SMPP_PASSWORD, system_type='www')
	log.info('.................................')

def smppDisconnect(smpp):
        SOCK_SMPP.unbind()
        SOCK_SMPP.disconnect()
	log.info('\n\nDisconnected from SMPP Network')

#####
# Log SMS
#####
def logSMS(FROM, TO, MSG, info):
	log.info('  _______    Date : '+str(time.asctime( time.localtime(time.time()) ))+' - '+str(info))
        log.info(' |\_____/|   From : '+str(FROM))
        log.info(' |_______|   To : '+str(TO))
        log.info('             Message : '+str(MSG))
        log.info('###################################################################################')

#####
# Connect / DISCONNECT FROM SIP
#####
def sipConnect():
	global SOCK_SIP
	SOCK_SIP = socket.socket(socket.AF_INET, socket.SOCK_DGRAM, socket.SOL_UDP)
	SOCK_SIP.setsockopt(socket.SOL_SOCKET,socket.SO_REUSEADDR,1)
	SOCK_SIP.setblocking(0)
	log.info('Activating SIP Port on '+str(LOCAL_SIP_IP)+':'+str(LOCAL_SIP_PORT))
	SOCK_SIP.bind((LOCAL_SIP_IP,LOCAL_SIP_PORT))
	log.info('Waiting for SIP Messages from '+str(DEST_SIP_IP)+':'+str(DEST_SIP_PORT))

def sipDisconnect():
        SOCK_SIP.close()
	log.info('Disconnected from SIP Network')

######
# Store SMS FROM SMPP 2 SIP
######
def smpp2sip():
	#log.info('Waiting for SMPP...')
	SOCK_SMPP.set_message_received_handler(recv_handler)

def recv_handler(**args):
	pdu = args['pdu']
	if pdu and pdu.short_message:
       		msg = pdu.short_message
        	sendViaSIP(pdu.source_addr, pdu.destination_addr, msg)

#def sendViaSipSack( source, dest, msg ):
#        os.system('sipsak -c sip:'+str(source)+'@127.0.0.1:5061 -M -v -s sip:'+str(dest)+'@127.0.0.1:5061 -B "'+str(msg)+'"')

def sendViaSIP( source , dest, msg ):

	msglen = len(msg)
	TO = str(dest)+'@'+str(DEST_SIP_IP)+':'+str(DEST_SIP_PORT)
	FROM = str(source)+'@'+str(LOCAL_SIP_IP)+':'+str(LOCAL_SIP_PORT)
	cuuid = str(uuid.uuid1())

	SIPMSG = 'MESSAGE sip:'+str(TO)+' SIP/2.0\r\n'
	SIPMSG += 'Via: SIP/2.0/UDP '+str(LOCAL_SIP_IP)+'\r\n'
	SIPMSG += 'To: sip:'+str(TO)+'\r\n'
	SIPMSG += 'From: sip:'+str(FROM)+'\r\n'
	SIPMSG += 'CSeq: 1 MESSAGE\r\n'
	SIPMSG += 'Call-ID: '+str(cuuid)+'\r\n'
	SIPMSG += 'Content-Length: '+str(msglen)+'\r\n'
	SIPMSG += 'User-Agent: SMSC\r\n'
	SIPMSG += '\r\n'
	SIPMSG += str(msg)

	logSMS(source,dest,msg, "SMPP -> SIP")
	
	SOCK_SIP.sendto(str(SIPMSG), (DEST_SIP_IP,DEST_SIP_PORT) )

######
# Store SMS FROM SIP 2 SMPP
######
def sip2smpp():
	while 1:
		time.sleep(0.01)
		try:
      			data, addr = SOCK_SIP.recvfrom(1024)
  		except Exception, e:
      			pass
  		else:
    			FROM_HOST = addr[0]
    			FROM_PORT = addr[1]
			SIPRESPONSE = data.split('\r\n')
			if re.search('^MESSAGE', SIPRESPONSE[0]):
        			for resp in SIPRESPONSE:
                			if 'MESSAGE:' in resp:
                			        URI_RESPONSE = resp
                			if 'From:' in resp:
                			        FROM_RESPONSE = resp
						listtemp = re.findall("sip:(.*)@", resp)
						fromNumber = str(listtemp[0]).strip()
                			if 'To:' in resp:
                        			TO_RESPONSE = resp
						listtemp = re.findall("sip:(.*)@", resp)
						toNumber = str(listtemp[0]).strip()
                			if 'Call-ID:' in resp:
                 		       		CALLID_RESPONSE = resp
        			DATA = SIPRESPONSE[ len(SIPRESPONSE)-1 ]
			        SIPMSG = 'SIP/2.0 200 OK\r\n'
        			SIPMSG += str(FROM_RESPONSE)+'\r\n'
        			SIPMSG += str(TO_RESPONSE)+'\r\n'
        			SIPMSG += str(CALLID_RESPONSE)+'\r\n'
        			SIPMSG += 'CSeq: 1 MESSAGE\r\n'
        			SIPMSG += 'Via: SIP/2.0/UDP '+str(FROM_HOST)+':'+str(FROM_PORT)+';alias;received='+str(FROM_HOST)+'\r\n'
        			isMessage = 1
    			else:
        			SIPMSG = 'SIP/2.0 406 Not Acceptable\r\n'
        			isMessage = 0

    			SIPMSG += 'User-Agent: SMSC\r\n'
    			SIPMSG += 'Allow: INVITE, ACK, BYE, CANCEL, OPTIONS, MESSAGE\r\n'
    			SIPMSG += 'Supported: timer, precondition, path, replaces\r\n'
    			SIPMSG += 'Content-Length: 0\r\n'
			try:
				SOCK_SIP.sendto(str(SIPMSG), (FROM_HOST,FROM_PORT) )
			except Exception,e:
				log.info("Reply to SIP : "+str(e))
			if isMessage == 1:
				try: 
					sendViaSMPP( fromNumber, toNumber, DATA)
				except Exception,e:
					log.info("Send Via sip : "+str(e))

def sendViaSMPP( FROM, TO, msg ):
    length  = len(msg)
    splitat = 140
    # 140 Sur des multi sms
    parts = length/splitat +1
    if length > splitat:
        for k in range(parts):
            msgpart =  msg[k*splitat:k*splitat+splitat]
            SOCK_SMPP.send_message(source_addr_ton=5,
                                source_addr_npi=3,
                                source_addr=FROM,
                                dest_addr_ton=smpplib.command.SMPP_TON_UNK,
                                dest_addr_npi = smpplib.command.SMPP_NPI_ISDN,
                                destination_addr=TO,
                                sar_msg_ref_num = 1,
                                sar_total_segments = parts,
                                sar_segment_seqnum = k+1,
                                message_payload=msgpart)
    else:
        SOCK_SMPP.send_message(source_addr_ton=5,
                                source_addr_npi = 3,
                                source_addr=FROM,
                                dest_addr_ton=smpplib.command.SMPP_TON_UNK,
                                dest_addr_npi = smpplib.command.SMPP_NPI_ISDN,
                                destination_addr=TO,
                                short_message=msg)

    logSMS(FROM,TO,msg, "SIP -> SMPP")

########
# MAIN
########
try:
	print ''
	print '  _____ __  __  _____  _____ '
	print ' / ____|  \/  |/ ____|/ ____|'
	print '| (___ | \  / | (___ | |     '
	print ' \___ \| |\/| |\___ \| |     '
	print ' ____) | |  | |____) | |____ '
	print '|_____/|_|  |_|_____/ \_____| sip2smpp v2.1'
	print '***************Connection SIP***************'
	time.sleep(1)
	sipConnect()
	print '**************Connection  SMPP**************'
	time.sleep(1)
	smppConnect()
	print '***************Start  threads***************'
	start_new_thread( sip2smpp ,())
	start_new_thread( smpp2sip ,())
	print '********************************************'
	SOCK_SMPP.listen()
except Exception,e:
	log.error(e)        
finally:
	try:
		smppDisconnect()
	except Exception,e:
		log.error("SMPP not connected \n Reason : "+str(e))
	try:
		sipDisconnect()
	except Exception,e:
		log.error("SIP not connected\n Reason : "+str(e))
	print '******************* Close ******************'
